// Copyright (c) 2023 - Restate Software, Inc., Restate GmbH
//
// This file is part of the Restate e2e tests,
// which are released under the MIT license.
//
// You can find a copy of the license in file LICENSE in the root
// directory of this repository or package, or at
// https://github.com/restatedev/e2e/blob/main/LICENSE

syntax = "proto3";

option java_package = "dev.restate.e2e.services.awakeableholder";
option java_outer_classname = "AwakeableHolderProto";

import "google/protobuf/empty.proto";
import "dev/restate/ext.proto";

package awakeableholder;

// This is a generic utility service that can be used in various situations where
// we need to synchronize the services with the test runner using an awakeable.
service AwakeableHolderService {
  option (dev.restate.ext.service_type) = KEYED;

  rpc Hold(HoldRequest) returns (google.protobuf.Empty);
  rpc HasAwakeable(HasAwakeableRequest) returns (HasAwakeableResponse);
  rpc Unlock(UnlockRequest) returns (google.protobuf.Empty);
}

message HoldRequest {
  // Name is an alias of the id we can address in the test
  string name = 1 [(dev.restate.ext.field) = KEY];
  string id = 2;
}

message HasAwakeableRequest {
  string name = 1 [(dev.restate.ext.field) = KEY];
}

message HasAwakeableResponse {
  bool has_awakeable = 1;
}

message UnlockRequest {
  string name = 1 [(dev.restate.ext.field) = KEY];
  string payload = 2;
}
