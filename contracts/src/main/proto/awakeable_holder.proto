syntax = "proto3";

option java_package = "dev.restate.e2e.services.awakeableholder";
option java_outer_classname = "AwakeableHolderProto";

import "google/protobuf/empty.proto";
import "dev/restate/ext.proto";
import "dev/restate/core.proto";

package awakeableholder;

// This is a generic utility service that can be used in various situations where
// we need to synchronize the services with the test runner using an awakeable.
service AwakeableHolderService {
  option (dev.restate.ext.service_type) = KEYED;

  rpc Hold(HoldRequest) returns (google.protobuf.Empty);
  rpc HasAwakeable(HasAwakeableRequest) returns (HasAwakeableResponse);
  rpc Unlock(UnlockRequest) returns (google.protobuf.Empty);
}

message HoldRequest {
  string awakeable_id = 1 [(dev.restate.ext.field) = KEY];
  oneof id {
    dev.restate.core.AwakeableIdentifier id_struct = 2;
    string id_string = 3;
  }
}

message HasAwakeableRequest {
  string awakeable_id = 1 [(dev.restate.ext.field) = KEY];
}

message HasAwakeableResponse {
  bool has_awakeable = 1;
}

message UnlockRequest {
  string awakeable_id = 1 [(dev.restate.ext.field) = KEY];
  string payload = 2;
}
