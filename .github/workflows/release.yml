name: Publish release

on:
  workflow_call:
    inputs:
      deploymentTarget:
        description: 'Deployment target (JFrog or GitHub)'
        required: true
        default: 'GitHub'
        type: string

jobs:
  publish:
    if: github.repository == 'restatedev/e2e'
    name: Publish
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      GH_PACKAGE_READ_ACCESS_USER: ${{ secrets.GH_PACKAGE_READ_ACCESS_USER }}
      GH_PACKAGE_READ_ACCESS_TOKEN: ${{ secrets.GH_PACKAGE_READ_ACCESS_TOKEN }}
      NODE_AUTH_TOKEN: ${{ secrets.GH_PACKAGE_READ_ACCESS_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'adopt'

      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          registry-url: "https://npm.pkg.github.com"

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      # Ideally we delete old packages after releasing new ones but this does not work for snapshot releases
      - name: Delete old e2e-utils packages
        if: ${{ inputs.deploymentTarget == 'GitHub' }}
        uses: actions/delete-package-versions@v3
        with:
          package-name: 'dev.restate.testing.e2e-utils'
          min-versions-to-keep: 0
          # We want to remove all the versions containing SNAPSHOT in the name
          # See https://github.com/actions/delete-package-versions/issues/61
          ignore-versions: '^.*(?<!SNAPSHOT)$'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build with Gradle & publish to JFrog repository
        if: ${{ inputs.deploymentTarget == 'JFrog' }}
        uses: gradle/gradle-build-action@v2
        env:
          JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
          JFROG_TOKEN: ${{secrets.JFROG_TOKEN }}
        with:
          arguments: publishMavenPublicationToJFrogRepository
      - name: Build with Gradle & publish to GitHub packages repository
        if: ${{ inputs.deploymentTarget == 'GitHub' }}
        uses: gradle/gradle-build-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          arguments: publishMavenPublicationToGitHubPackagesRepository
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/restatedev/e2e-node-services
          # Note: We need this to generate the latest tag until we have a first stable release.
          # Check https://github.com/docker/metadata-action/issues/34
          flavor: |
            latest=true
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
      - name: Build amd64 Docker image with Gradle
        uses: gradle/gradle-build-action@v2
        env:
          DOCKER_BUILD_PLATFORM: linux/amd64
        with:
          arguments: dockerBuild
      - name: Tag and push amd64 Docker image
        run: |
          while IFS= read -r tag; do
          echo "Tagging image ${tag}-amd64"
          docker tag restatedev/e2e-node-services:latest "${tag}-amd64"
          done <<< "${{ steps.meta.outputs.tags }}"
          docker push -a ghcr.io/restatedev/e2e-node-services
      - name: Build arm64 Docker image with Gradle
        uses: gradle/gradle-build-action@v2
        env:
          DOCKER_BUILD_PLATFORM: linux/arm64
        with:
          arguments: dockerBuild
      - name: Tag and push arm64 Docker image
        run: |
          while IFS= read -r tag; do
          echo "Tagging image ${tag}-arm64"
          docker tag restatedev/e2e-node-services:latest "${tag}-arm64"
          done <<< "${{ steps.meta.outputs.tags }}"
          docker push -a ghcr.io/restatedev/e2e-node-services
      - name: Create and push Docker manifest
        run: |
          while IFS= read -r tag; do
          echo "Creating manifest for ${tag}"
          docker manifest create "${tag}" \
              --amend "${tag}-amd64" \
              --amend "${tag}-arm64"
          docker manifest push "${tag}"
          done <<< "${{ steps.meta.outputs.tags }}"
